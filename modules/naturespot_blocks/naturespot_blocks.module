<?php

use Drupal\node\Entity\Node;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;


define('NS_GRANT_ALL', 51);

function naturespot_blocks_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'species_gallery_for_group') {
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    $menuTid = array_pop($path_args);
    $menuTid = 19327;
    // add a basic top level filter
    $query->addWhereExpression(0,
      "(taxonomy_term_field_data_node__field_species_library_menu__taxonomy_term_hierarchy.parent = $menuTid
       or taxonomy_term_field_data_taxonomy_term_hierarchy__taxonomy_term_hierarchy.parent=$menuTid)"
    );
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($menuTid);
    $isCaterpillar = stripos($term->name->value, 'caterpillar') !== false;
    $isGall = stripos($term->name->value, 'gall') !== false;
    // Add relationships for caterpillar info
    $configuration = [
      'table' => 'node__field_caterpillar',
      'field' => 'entity_id',
      'left_table' => 'taxa_taxonomy_term_field_data',
      'left_field' => 'nid',
      'operator' => '='
    ];
    $join = Views::pluginManager('join')->createInstance('standard', $configuration);
    $query->addRelationship('node__field_caterpillar', $join, 'taxa_taxonomy_term_field_data');
    // now the relationship for galls
    $configuration = [
      'table' => 'node__field_gall',
      'field' => 'entity_id',
      'left_table' => 'taxa_taxonomy_term_field_data',
      'left_field' => 'nid',
      'operator' => '='
    ];
    $join = Views::pluginManager('join')->createInstance('standard', $configuration);
    $query->addRelationship('node__field_gall', $join, 'taxa_taxonomy_term_field_data');
    // Filter appropriately for caterpillar and gall data
    $caterpillarFilter = $isCaterpillar ? 1 : 0;
    $query->addWhere(0, 'node__field_caterpillar.field_caterpillar_value', $caterpillarFilter);

    $gallFilter = $isGall ? 1 : 0;
    $query->addWhere(0, 'node__field_gall.field_gall_value', $gallFilter);
  }
}

function naturespot_blocks_form_user_login_form_alter(&$form, $form_state) {
  // Alter login form and add own custom submit handler.
  $form['#submit'][] = '_naturespot_blocks_user_login_form_submit';
}

/**
 * Custom submit handler for login form.
 */
function _naturespot_blocks_user_login_form_submit($form, $form_state) {
  $form_state->setRedirect('<front>');
}

function naturespot_blocks_node_grants(\Drupal\Core\Session\AccountInterface $account, $op) {
  $grants = array();
  if ($account->hasPermission('view ns admin page'))
    $grants['ns_admin_page_access'] = NS_GRANT_ALL;
  return $grants;
}

/**
 * Implements hook_node_access_records.
 * Returns grants required to access a particular iform node.
 * @param \Drupal\node\NodeInterface $node
 * @return array
 */
function naturespot_blocks_node_access_records(\Drupal\node\NodeInterface $node) {
  $grants = array();
  $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$node->id());
  $adminPages = array(
    '/content/manual',
    '/content/log-details',
    '/import-instructions',
    '/all-species-view',
    '/content/whos-who'
  );
  if (in_array($alias, $adminPages)) {
    $grants[] = array(
      'realm' => 'ns_admin_page_access',
      'gid' => NS_GRANT_ALL,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1
    );
  }
  return $grants;
}

/**
 * Implementation of hook_cron.
 * Copies verified image data into Drupal image links.
 */
function naturespot_blocks_cron() {
  iform_load_helpers(['report_helper']);
  // Get a list of the images which are for verified records but are not copied to Drupal or rejected.
  $config = \Drupal::config('iform.settings');
  $auth = \report_helper::get_read_write_auth($config->get('website_id'), $config->get('password'));
  $auth['write_tokens']['persist_auth'] = true;
  $fetchOpts = array(
    'dataSource'=>'naturespot/images_to_copy',
    'mode'=>'report',
    'readAuth' => $auth['read'],
  );
  $images = \report_helper::get_report_data($fetchOpts);
  foreach ($images as $image) {
    if (empty($image['external_key'])) {
      continue;
    }
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'species')
      ->condition('status', 1)
      ->condition('field_nbn_number', $image['external_key']);
    $nids = $query->execute();
    if (count($nids) > 0) {
      // should only be 1
      $nid = array_pop($nids);
      $node = \Drupal\node\Entity\Node::load($nid);
      $tid = $node->taxa->target_id;
      $image['priority'] = 8; // default for now
      // Reformat the date
      //$image['date'] = date('d F Y', str_replace('/', '-', $image['date']));
      $image['confidence'] = empty($image['confidence']) ? 'Certain' : $image['confidence'];
      _add_image_to_db($node, $tid, $image);
      // Now, mark the image as uploaded in Indicia
      iform_load_helpers(['data_entry_helper']);
      $submission = array(
        'occurrence_image:id' => $image['id'],
        'occurrence_image:external_details' => 'Copied to Drupal',
        'website_id' => $config->get('website_id')
      );
      $submission = \data_entry_helper::build_submission($submission, array('model' => 'occurrence_image'));
      $response = \data_entry_helper::forward_post_to('occurrence_image', $submission, array_merge($auth['write_tokens']));
    }
  }
}

function _add_image_to_db($speciesNode, $tid, $image) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'image_link')
    ->condition('field_file_name', $image['path'])
    ->accessCheck(FALSE);
  $existing = $query->execute();
  if (empty($existing)) {
    $speciesNid = $speciesNode->id();
    // Create node object with attached file.
    $node = Node::create([
      'type' => 'image_link',
      'status' => 0,
      'title' => $image['path'],
      'field_file_name' => [$image['path']],
      'field_priority' => [$image['priority']],
      'field_site' => [$image['location_name']],
      'field_date' => [$image['date']],
      'field_recorder' => [$image['recorders']],
      'field_comment' => [$image['caption']],
      'field_confidence' => [$image['confidence']],
      'field_moderator' => ['admin'],
      'taxa' => ['target_id' => $tid],
    ]);
    $node->save();
    return true;
  } else {
    return false;
  }
}